# Salesforce Development Standards

## Lightning Web Components (LWC)

-   Always use `lwc:if|elseif|else` instead of deprecated `if:true|if:false`
-   Use `lwc:for` instead of deprecated `for:each`
-   Use double quotes for strings consistently
-   Use tabs for indentation (4 spaces = 1 tab)
-   Use modern ES6+ syntax (const/let, arrow functions, destructuring)
-   Follow Salesforce LWC best practices and security guidelines
-   Use `@track` only when necessary (LWC tracks primitives automatically)
-   Use `@api` for public properties and methods
-   Use `@wire` for data fetching when possible
-   Import only what you need from modules
-   **NEVER use complex expressions in template attributes** - move logic to JavaScript getters
-   **Template attributes must be simple property references** - no ternary operators, function calls, or complex expressions
-   **ALL JavaScript property references in LWC templates must use {} WITHOUT quotes**
-   **LWC directives**: `lwc:if={hasErrors}` NOT `lwc:if="{hasErrors}"`
-   **Template iteration**: `for:each={items}` NOT `for:each="{items}"`
-   **Event handlers**: `onclick={handleClick}` NOT `onclick="{handleClick}"`
-   **Property bindings**: `value={item.key}` NOT `value="{item.key}"`
-   **Dynamic attributes**: `data-index={index}` NOT `data-index="{index}"`
-   **Key attributes**: `key={item.id}` NOT `key="{item.id}"`
-   **Disabled states**: `disabled={isLoading}` NOT `disabled="{isLoading}"`
-   **Only use quotes for literal string values**: `class="slds-input"` or `data-field="key"`
-   Use computed properties (getters) for dynamic attribute values
-   Keep template logic minimal and declarative

## Apex Code

-   Use proper naming conventions (PascalCase for classes, camelCase for methods)
-   Always include proper documentation comments
-   Use meaningful variable and method names
-   Follow Salesforce security best practices (SOQL injection prevention, etc.)
-   Use bulkified code patterns
-   Include proper error handling with try-catch blocks
-   Use custom exceptions for business logic errors
-   Follow the single responsibility principle

## SOQL and DML

-   Always use bind variables to prevent SOQL injection
-   Use bulk DML operations (lists) instead of single record operations
-   Include proper WHERE clauses to avoid governor limits
-   Use LIMIT clauses appropriately
-   Consider using Database.query() for dynamic SOQL with proper escaping

## Test Classes

-   Aim for 100% code coverage
-   Use @TestSetup for common test data
-   Test both positive and negative scenarios
-   Use System.assert() methods appropriately
-   Mock external callouts when testing
-   Use Test.startTest() and Test.stopTest() for governor limit testing

## Metadata and Configuration

-   Use proper API versions (latest stable)
-   Follow naming conventions for custom objects and fields
-   Use meaningful labels and descriptions
-   Consider field-level security and sharing rules
-   Use proper data types and field lengths

## Security

-   Follow the principle of least privilege
-   Use proper sharing rules and field-level security
-   Validate all user inputs
-   Use proper authentication and authorization
-   Follow OWASP guidelines for web security

## Performance

-   Optimize SOQL queries (avoid SELECT \*)
-   Use proper indexing strategies
-   Consider using Platform Events for async processing
-   Use batch processing for large data operations
-   Monitor governor limits

## Code Organization

-   Use proper folder structure
-   Group related functionality together
-   Use meaningful file and folder names
-   Include proper documentation
-   Follow the DRY (Don't Repeat Yourself) principle

## Error Handling

-   Use proper exception handling
-   Provide meaningful error messages
-   Log errors appropriately
-   Use custom exceptions for business logic
-   Handle governor limit exceptions gracefully

## Documentation

-   Include proper JSDoc comments for LWC
-   Use meaningful commit messages
-   Document complex business logic
-   Include README files for complex components
-   Document API endpoints and parameters

## Version Control

-   Use meaningful commit messages
-   Create feature branches for new development
-   Use proper pull request reviews
-   Tag releases appropriately
-   Keep commit history clean

## Accessibility

-   Use proper ARIA labels
-   Ensure keyboard navigation works
-   Use semantic HTML elements
-   Test with screen readers
-   Follow WCAG guidelines

## Mobile Responsiveness

-   Use Lightning Design System components
-   Test on different screen sizes
-   Use responsive design patterns
-   Consider touch interactions
-   Optimize for mobile performance
